@page "/logworkout"
@rendermode InteractiveServer

@using System.Timers

@using GymTracker.ViewModels
@using GymTracker.Models
@using GymTracker.Data

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1 class="mb-4 text-center">Journal</h1>

<!-- Date and Workout Stopwatch containers -->
<div class="container-fluid container-white px-0 rounded">
    <div class=" d-flex flex-wrap gap-3">
        <!-- Date -->
        <div class="p-3 flex-fill" style="min-width: 150px;">
            <label class="form-label fs-4"><strong>Date</strong></label>
            <input class="form-control fs-5 container-date" type="date" @bind="workoutDate" @bind:after="OnDateChanged"/>
        </div>

        <!-- Workout Stopwatch -->
        <div class="p-3 flex-fill" style="min-width: 150px;">
            <label class="form-label fs-4"><strong>Stopwatch</strong></label>

            <div class="d-flex gap-2 mb-1">
                <button class="@buttonType flex-fill d-flex justify-content-between align-items-center fs-5" @onclick="ToggleWorkout">
                    <div class="d-flex align-items-center gap-2 fs-5">
                        <span>@(isWorkoutActive ? "‚èπ" : "‚ñ∂")</span>
                        <strong>@buttonText</strong>
                    </div>
                    <span class="ms-3">@formattedDuration</span>
                </button>

                <button class="btn button-success" @onclick="ResetWorkout" disabled="@isWorkoutActive">
                    ‚Ü∫
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Code - Date -->
@code {
    private DateTime workoutDate = DateTime.Today;
}

<!-- Code - Stopwatch -->
@code {
     private string buttonText => isWorkoutActive ? "Stop" : "Start";
    private string buttonType => isWorkoutActive ? "btn button-danger" : "btn button-success";

    private bool isWorkoutActive = false;

    private TimeSpan workoutDuration = TimeSpan.Zero; // Accumulated time
    private Timer? workoutTimer;
    private DateTime lastStartTime;

    private TimeSpan DisplayDuration =>
        isWorkoutActive
            ? workoutDuration + (DateTime.Now - lastStartTime) // running
            : workoutDuration; // paused

    private string formattedDuration => DisplayDuration.ToString(@"hh\:mm\:ss");

    private void ToggleWorkout()
    {
        if (!isWorkoutActive)
        {
            // Resume workout
            isWorkoutActive = true;
            lastStartTime = DateTime.Now;

            workoutTimer = new Timer(1000);
            workoutTimer.Elapsed += UpdateWorkoutDuration;
            workoutTimer.AutoReset = true;
            workoutTimer.Start();
        }
        else
        {
            // Pause workout
            isWorkoutActive = false;

            // Add the time since last resume
            workoutDuration += DateTime.Now - lastStartTime;

            workoutTimer?.Stop();
            workoutTimer?.Dispose();
        }
    }

    private void UpdateWorkoutDuration(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(StateHasChanged); // Just refresh UI
    }

    private void ResetWorkout()
    {
        if (isWorkoutActive)
            return;

        workoutDuration = TimeSpan.Zero;
    }
}


<!-- Journal NEW --> 
@if (currentSession != null)
{
    <div class="container-fluid container-white px-3 py-3 mt-3 rounded">
        <label class="form-label fs-4"><strong>Journal</strong></label>
        <!-- Add excercise -->
        <div class="d-flex gap-2">
            <button class="btn button-success flex-fill d-flex justify-content-between align-items-center fs-5" @onclick="AddExercise">
                <div class="d-flex align-items-center gap-2 fs-5">
                    <span>+</span>
                    <strong>Add Exercise</strong>
                </div>
            </button>
        </div>
    </div>
}
else
{
    <p>Loading workout session...</p>
}

@if (currentSession != null)
{
    <div class="container-fluid container-white px-3 py-3 mt-3 rounded">
        <label class="form-label fs-4"><strong>Journal for @workoutDate.ToShortDateString()</strong></label>

        @if (currentSession.WorkoutEntries.Count == 0)
        {
            <p class="text-muted">No exercises logged for this date.</p>
        }

        @for (int i = 0; i < currentSession.WorkoutEntries.Count; i++)
        {
            var entry = currentSession.WorkoutEntries[i];

            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <strong>@entry.ExerciseName</strong>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleExercise(i)">
                        @(IsExpanded(i) ? "Hide" : "Show")
                    </button>
                </div>

                @if (IsExpanded(i))
                {
                    <div class="card-body">
                        @for (int j = 0; j < entry.Sets.Count; j++)
                        {
                            var set = entry.Sets[j];
                            <div class="d-flex gap-2 mb-2">
                                <input type="number" class="form-control" placeholder="Weight (lbs)" @bind="set.Weight" />
                                <input type="number" class="form-control" placeholder="Reps" @bind="set.Reps" />
                            </div>
                        }

                        <button class="btn btn-sm btn-outline-success" @onclick="() => AddSet(entry)">+ Add Set</button>
                    </div>
                }
            </div>
        }

        <!-- Add New Exercise -->
        <div class="d-flex gap-2 mt-3">
            <select class="form-select" @bind="newExerciseName">
                <option value="">-- Select Exercise --</option>
                @foreach (var exercise in ExerciseLibrary.All)
                {
                    <option value="@exercise.Name">@exercise.Name</option>
                }
            </select>

            <button class="btn btn-primary" @onclick="AddExercise" disabled="@string.IsNullOrWhiteSpace(newExerciseName)">
                + Add Exercise
            </button>
        </div>

        <div class="mt-3">
            <button class="btn btn-success" @onclick="SaveSession">üíæ Save</button>
        </div>
    </div>
}
else
{
    <p>Loading workout session...</p>
}


@code {
    private WorkoutSession? currentSession;
    private string? newExerciseName;

    private readonly Dictionary<int, bool> expandedEntries = new();
    private bool _hasRendered = false;

    // üîÑ Load session only once after client-side render is ready
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hasRendered = true;
            await LoadSessionFromLocal();
            StateHasChanged();
        }
    }

    // üìÖ Load session when the date changes
    private async Task OnDateChanged()
    {
        if (!_hasRendered) return;
        await LoadSessionFromLocal();
    }

    // üíæ Load session from browser local storage
    private async Task LoadSessionFromLocal()
    {
        var key = $"workout_{workoutDate:yyyyMMdd}";
        var saved = await LocalStorage.GetItemAsync<WorkoutSession>(key);

        currentSession = saved ?? new WorkoutSession { Date = workoutDate };
    }

    // üíæ Save session to browser local storage
    private async Task SaveSessionToLocal()
    {
        if (currentSession == null) return;

        var key = $"workout_{workoutDate:yyyyMMdd}";
        await LocalStorage.SetItemAsync(key, currentSession);
        Console.WriteLine($"üíæ Saved session for {workoutDate:d}");
    }

    // üìÇ Toggle visibility of exercise sets
    private void ToggleExercise(int index)
    {
        expandedEntries[index] = !IsExpanded(index);
    }

    private bool IsExpanded(int index)
    {
        return !expandedEntries.ContainsKey(index) || expandedEntries[index];
    }

    // ‚ûï Add a new set to an exercise
    private async void AddSet(WorkoutEntry entry)
    {
        entry.Sets.Add(new Set());
        await SaveSessionToLocal(); // Auto-save
    }

    // ‚ûï Add a new exercise
    private async void AddExercise()
    {
        if (string.IsNullOrWhiteSpace(newExerciseName)) return;

        currentSession ??= new WorkoutSession { Date = workoutDate };

        currentSession.WorkoutEntries.Add(new WorkoutEntry
        {
            ExerciseName = newExerciseName,
            Sets = new List<Set> { new Set() }
        });

        newExerciseName = string.Empty;
        await SaveSessionToLocal(); // Auto-save
    }

    // üíæ Manual Save button
    private async Task SaveSession()
    {
        await SaveSessionToLocal();
    }
}